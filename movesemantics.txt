Move semantics is a new way of moving resources around in an optimal way by avoiding unnecessary copies of temporary objects, based on rvalue references. 
In my opinion, the best way to understand what move semantics is about is to build a wrapper class around a dynamic resource (i.e. a dynamically allocated pointer) 
and keep track of it as it moves in and out functions.
Keep in mind however that move semantics does not apply only to classes!

When you choose to manage the memory yourself you should follow the so-called Rule of Three. 
This rule states that if your class defines one or more of the following methods it should probably explicitly define all three:
-destructor;
-copy constructor;
-copy assignment operator.
